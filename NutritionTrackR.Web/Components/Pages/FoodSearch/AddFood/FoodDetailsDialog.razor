@using NutritionTrackR.Contracts.Food
@using NutritionTrackR.Web.Components.Services

@inject FoodListAdapter FoodListAdapter
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            @FoodModel.Name
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="d-flex gap-3 justify-start flex-grow-1">
            <MudTextField T="decimal" @bind-Value="@FoodModel.Amount"/>

            <MudSelect @bind-Value="@FoodModel.Unit">
                @foreach (var unit in Enum.GetValues(typeof(UnitDto)).Cast<UnitDto>())
                {
                    <MudSelectItem Value="unit">@unit</MudSelectItem>
                }
            </MudSelect>
        </div>
        
@* <MudProgressCircular Size="Size.Large" Color="Color.Secondary" Value="@NutritionModel.Carbs" /> *@
@* <MudProgressCircular Size="Size.Large" Color="Color.Success" Value="@NutritionModel.Protein" /> *@
@* <MudProgressCircular Size="Size.Large" Color="Color.Info" Value="@NutritionModel.Fat" /> *@

        @foreach (var nutrient in FoodModel.Nutrients)
        {
            <MudText>@nutrient.Name @nutrient.DisplayWeight()</MudText>
        }

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        
        @if (IsEditMode is false)
        {
            <MudButton OnClick="AddFood">Add</MudButton>
        }
        else
        {
            <MudButton OnClick="UpdateFood">Update</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    [Parameter] public FoodModel FoodModel { get; set; }
    [Parameter] public MealTypeDto SelectedMealType { get; set; }
    [Parameter] public DateOnly Date { get; set; }
    [Parameter] public EventCallback OnFoodAdded { get; set; }
    [Parameter] public bool IsEditMode { get; set; }
    // private FoodModel Model { get; set; }
    private NutritionModel NutritionModel { get; set; }

    protected override void OnInitialized()
    {
        // Model = new FoodModel(Food, SelectedMealType);
        
        // todo init nutrition model
        NutritionModel = new NutritionModel
        {
            Carbs = 57,
            Protein = 67,
            Fat = 34
        };
    }

    private void Cancel() => MudDialog.Close();
    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private async Task AddFood()
    {
        try
        {
            await FoodListAdapter.LogFood(FoodModel, Date);
            Snackbar.Add($"{FoodModel.Food.Name} {FoodModel.Food.Amount} {FoodModel.Food.Unit} was logged", Severity.Success);
            
            await OnFoodAdded.InvokeAsync();
            Submit();
        }
        catch (Exception)
        {
            Snackbar.Add("Could not log food", Severity.Error);
        }
    }

    private async Task UpdateFood()
    {
        try
        {
            await FoodListAdapter.UpdateLoggedFood(FoodModel, Date);
            await OnFoodAdded.InvokeAsync();
            Submit();
        }
        catch (Exception)
        {
            Snackbar.Add("Could not update logged food", Severity.Error);
        }
    }
}

@* TODO add favorite button *@