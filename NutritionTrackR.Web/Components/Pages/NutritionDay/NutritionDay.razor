@page "/"
@using NutritionTrackR.Contracts.Food
@using NutritionTrackR.Web.Components.Pages.FoodSearch.AddFood
@using NutritionTrackR.Web.Components.Services

@inject FoodListAdapter FoodListAdapter
@inject IDialogService DialogService

<h3>NutritionDay</h3>

<div class="d-flex">
    <MudButton OnClick="GetPreviousNutritionDay">Previous Day</MudButton>
    <MudText>@CurrentDate</MudText>
    <MudButton OnClick="GetNextNutritionDay">Next Day</MudButton>
</div>

<MudDropContainer T="FoodSelector" Items="@_foods" @ref="_container" ItemsSelector="@((item, dropzoneId) => item.ZoneId == dropzoneId)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        @foreach (var mealZone in _mealZones)
        {
            <MudPaper Class="ma-4 flex-grow-1">
                <MudList T="string" Class="d-flex flex-column mud-height-full">
                    <MudText Typo="Typo.h6" Align="Align.Center">@mealZone.ZoneId</MudText>
                    <MudDropZone T="FoodSelector" Identifier="@mealZone.ZoneId" Class="flex-grow-1" AllowReorder="true"/>
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.AddCircle" Color="Color.Primary" OnClick="() => AddFoodToMeal(mealZone.MealType)"></MudButton>
                </MudList>
            </MudPaper>
        }
    </ChildContent>
    <ItemRenderer>
        <MudListItem T="FoodSelector">
            <div class="d-flex justify-space-between">
                <MudText>@context.Name</MudText>
                <MudText>@context.DisplayWeight()</MudText>
            </div>
        </MudListItem>
    </ItemRenderer>
</MudDropContainer>


<MudDataGrid Items="@_nutrients" EditMode="@DataGridEditMode.Cell">
    <Columns>
        <HierarchyColumn T="NutrientDto"/>
        <PropertyColumn Property="x => x.Name" Title="Nutrient"/>
        <PropertyColumn Property="x => x.DisplayWeight()" Title="Weight"/>
    </Columns>
    <ChildRowContent>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager T="NutrientDto" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch T="bool" Color="@Color.Primary">Read Only</MudSwitch>
</div>

@code {
    private MudDropContainer<FoodSelector> _container;
    private List<FoodSelector> _foods = [];
    private List<NutrientDto> _nutrients { get; set; } = [];

    private DateOnly CurrentDate { get; set; } = DateOnly.FromDateTime(DateTime.Now);

    private void RefreshContainer()
    {
        StateHasChanged();
        _container.Refresh();
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateFoodList();

        CalculateNutrition();
    }

    private async Task UpdateFoodList()
    {
        var foods = await FoodListAdapter.GetLoggedFood(CurrentDate);
        _foods = foods.Select(f => new FoodSelector(f)).ToList();
        RefreshContainer();
    }

    private async Task AddFoodToMeal(MealTypeDto mealType)
    {
        DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<FoodSearchDialog>
        {
            { x => x.SelectedMealType, mealType },
            { x => x.OnFoodAdded, EventCallback.Factory.Create(this, UpdateFoodList) }
        };

        var dialog = await DialogService.ShowAsync<FoodSearchDialog>("Food Search", parameters, options);
        var result = await dialog.Result;
    }

    private static void ItemUpdated(MudItemDropInfo<FoodSelector> dropItem)
    {
        dropItem.Item.ZoneId = dropItem.DropzoneIdentifier;
        dropItem.Item.MealType = FoodSelector.GetMealType(dropItem.DropzoneIdentifier);
    }

    private readonly List<DropZone> _mealZones =
    [
        new DropZone { ZoneId = "Breakfast", MealType = MealTypeDto.Breakfast },
        new DropZone { ZoneId = "Lunch", MealType = MealTypeDto.Lunch },
        new DropZone { ZoneId = "Dinner", MealType = MealTypeDto.Dinner },
        new DropZone { ZoneId = "Snacks", MealType = MealTypeDto.Snack }
    ];

    private class DropZone
    {
        public string ZoneId { get; init; }
        public MealTypeDto MealType { get; init; }
    }

    private void CalculateNutrition()
    {
        var dictionary = new Dictionary<string, NutrientDto>();
        
        foreach (var food in _foods)
        {
            foreach (var nutrient in food.Nutrients)
            {
                if (dictionary.TryGetValue(nutrient.Name, out var dictionaryNutrient))
                {
                    dictionaryNutrient.Weight += nutrient.Weight;
                }
                else
                {
                    dictionary.Add(nutrient.Name, nutrient);
                }
            }
        }

        _nutrients = dictionary.Values.ToList();
    }

    private async Task GetPreviousNutritionDay()
    {
        CurrentDate = CurrentDate.AddDays(-1);
        
        await UpdateFoodList();
    }
    
    private async Task GetNextNutritionDay()
    {
        CurrentDate = CurrentDate.AddDays(1);

        await UpdateFoodList();
    }
}
