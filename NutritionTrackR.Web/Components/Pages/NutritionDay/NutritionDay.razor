@page "/"
@using NutritionTrackR.Contracts.Food
@using NutritionTrackR.Web.Components.Pages.FoodSearch.AddFood
@using NutritionTrackR.Web.Components.Services

@inject FoodListAdapter FoodListAdapter
@inject IDialogService DialogService

<h3>NutritionDay</h3>

<MudDropContainer T="FoodSelector" Items="@_foods" @ref="_container" ItemsSelector="@((item, dropzoneId) => item.ZoneId == dropzoneId)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        @foreach (var mealZone in _mealZones)
        {
            <MudPaper Class="ma-4 flex-grow-1">
                <MudList T="string" Class="d-flex flex-column mud-height-full">
                    <MudText Typo="Typo.h6" Align="Align.Center">@mealZone.ZoneId</MudText>
                    <MudDropZone T="FoodSelector" Identifier="@mealZone.ZoneId" Class="flex-grow-1" AllowReorder="true"/>
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.AddCircle" Color="Color.Primary" OnClick="() => AddFoodToMeal(mealZone.MealType)"></MudButton>
                </MudList>
            </MudPaper>
        }
    </ChildContent>
    <ItemRenderer>
        <MudListItem T="FoodSelector">
            <div class="d-flex justify-space-between">
                <MudText>@context.Name</MudText>
                <MudText>@context.DisplayWeight()</MudText>
            </div>
        </MudListItem>
    </ItemRenderer>
</MudDropContainer>

@* <MudAutocomplete T="FoodDto" ValueChanged="SelectFood" SearchFunc="SearchFood" ToStringFunc="@(food => food is null ? null : $"{food.Name}")"/> *@

@code {
    private MudDropContainer<FoodSelector> _container;
    private List<FoodSelector> _foods = [];

    private void RefreshContainer()
    {
        StateHasChanged();
        _container.Refresh();
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateFoodList();
    }

    private async Task UpdateFoodList()
    {
        var foods = await FoodListAdapter.GetLoggedFood();
        _foods = foods.Select(f => new FoodSelector(f)).ToList();
        RefreshContainer();
    }


    private async Task AddFoodToMeal(MealTypeDto mealType)
    {
        DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<FoodSearchDialog>
        {
            { x => x.SelectedMealType, mealType },
            { x => x.OnFoodAdded, EventCallback.Factory.Create(this, UpdateFoodList) }
        };

        var dialog = await DialogService.ShowAsync<FoodSearchDialog>("Food Search", parameters, options);
        var result = await dialog.Result;
    }


    private static void ItemUpdated(MudItemDropInfo<FoodSelector> dropItem)
    {
        dropItem.Item.ZoneId = dropItem.DropzoneIdentifier;
        dropItem.Item.MealType = FoodSelector.GetMealType(dropItem.DropzoneIdentifier);
    }

    private readonly List<DropZone> _mealZones =
    [
        new DropZone { ZoneId = "Breakfast", MealType = MealTypeDto.Breakfast },
        new DropZone { ZoneId = "Lunch", MealType = MealTypeDto.Lunch },
        new DropZone { ZoneId = "Dinner", MealType = MealTypeDto.Dinner },
        new DropZone { ZoneId = "Snacks", MealType = MealTypeDto.Snack }
    ];

    private class DropZone
    {
        public string ZoneId { get; init; }
        public MealTypeDto MealType { get; init; }
    }
}