@using NutritionTrackR.Contracts.Food
@using NutritionTrackR.Web.Components.Pages.FoodSearch.AddFood
@using NutritionTrackR.Web.Components.Services

@inject FoodListAdapter FoodListAdapter
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Search Food
        </MudText>
    </TitleContent>
    <DialogContent>

        <MudItem xs="12" sm="6" md="4">
            <MudAutocomplete T="FoodDto"
                             Label="Search Food" 
                             SearchFunc="SearchFood"
                             ValueChanged="foodValue => SelectFood(foodValue)"
                             ToStringFunc="@(food => food is null ? null : $"{food.Name}")"
                             AdornmentIcon="@Icons.Material.Filled.Search" 
                             AdornmentColor="Color.Primary"/>
        </MudItem>
        
        
    </DialogContent>
    <DialogActions>
        <MudButton>Add Food</MudButton>
    </DialogActions>
</MudDialog>


@code {
    
    [Parameter] public MealTypeDto SelectedMealType { get; set; }
    [Parameter] public EventCallback OnFoodAdded { get; set; }
    [Parameter] public DateTime Date { get; set; }
    private List<FoodDto> _searchedFood = [];
    
    protected override async Task OnInitializedAsync()
    {
        _searchedFood = await FoodListAdapter.GetFoodItems();
    }
    
    private Task<IEnumerable<FoodDto>> SearchFood(string searchTerm, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            return Task.FromResult(Enumerable.Empty<FoodDto>());
        }

        var searchedFoods = _searchedFood.Where(food => food.Name.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase));

        return Task.FromResult(searchedFoods);
    }

    private async Task SelectFood(FoodDto selectedFood)
    {
        DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogParameters<FoodDetailsDialog> parameters = new()
        {
            { x => x.Food, selectedFood },
            { x => x.SelectedMealType, SelectedMealType },
            { x => x.OnFoodAdded, EventCallback.Factory.Create(this, OnFoodAdded) },
            { x => x.Date, Date}
        };
    
        var dialog = await DialogService.ShowAsync<FoodDetailsDialog>(selectedFood.Name, parameters, options);
        var result = await dialog.Result;
    }
}