@page "/"
@using NutritionTrackR.Web.Services
@inject FoodListAdapter FoodListAdapter
@inject NutritionTargetAdapter NutritionTargetAdapter

<div class="d-flex">
    <MudButton OnClick="GetPreviousNutritionDay">Previous Day</MudButton>
    <MudText>@CurrentDate</MudText>
    <MudButton OnClick="GetNextNutritionDay">Next Day</MudButton>
</div>

<div class="d-flex justify-center">
    @* TODO create custom component for round progressbar, should have background for progress indicator *@
    <div class="flex-column">
        <MudProgressCircular Style="width: 200px; height: 200px;" Color="Color.Primary" Value="@DailyNutritionTarget.GetProgress(Carbs)"/>
        <MudText Align="Align.Center">Carbs</MudText>
    </div>

    <div class="flex-column">
        <MudProgressCircular Style="width: 200px; height: 200px;" Color="Color.Primary" Value="@DailyNutritionTarget.GetProgress(Protein)"/>
        <MudText Align="Align.Center">Protein</MudText>
    </div>

    <div class="flex-column">
        <MudProgressCircular Style="width: 200px; height: 200px;" Color="Color.Primary" Value="@DailyNutritionTarget.GetProgress(Fat)"/>
        <MudText Align="Align.Center">Fat</MudText>
    </div>
</div>

<div class="d-flex flex-column mt-5 mx-5">
    <MudProgressLinear Size="Size.Large" Color="Color.Primary" Value="@DailyNutritionTarget.GetProgress(Kcal)"></MudProgressLinear>
    <MudText Align="Align.Center">Kcal</MudText>
</div>

<MealDropZones OnFoodChangedEventCallback="UpdateFoodList"  @bind-Foods="Foods" CurrentDate="@CurrentDate"/>

<MudDataGrid T="NutrientDto" Items="@Nutrients">
    <Columns>
        <HierarchyColumn T="NutrientDto"/>
        <PropertyColumn Property="x => x.Name" Title="Nutrient"/>
        <PropertyColumn Property="x => x.Weight" Title="Weight"/>
        <TemplateColumn Title="Progress">
            <CellTemplate>
                <div class="d-flex align-items-center gap-3">
                    @if (DailyNutritionTarget.IsComplete(context.Item) is false)
                    {
                        <MudText>@(Math.Round(context.Item.Weight, 2) + "/" + DailyNutritionTarget.GetNutrientTarget(context.Item) + " " + context.Item.Unit)</MudText>
                        <MudProgressLinear Value="@(DailyNutritionTarget.GetProgress(context.Item))" Min="0" Max="100" Color="Color.Primary"/>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success"></MudIcon>
                    }
                </div>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                </CardHeaderContent>
            </MudCardHeader>
        </MudCard>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager T="NutrientDto" />
    </PagerContent>
</MudDataGrid>

@code {
    private List<FoodSelector> Foods { get; set; } = [];
    private List<NutrientDto> Nutrients { get; set; } = [];
    private DailyNutritionTarget DailyNutritionTarget { get; set; } = new([]);
    private DateOnly CurrentDate { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    
    // TODO move these to a model class
    private NutrientDto? Kcal { get; set; } = new();
    private NutrientDto? Carbs { get; set; } = new();
    private NutrientDto? Protein { get; set; } = new();
    private NutrientDto? Fat { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var nutritionTarget  = await NutritionTargetAdapter.GetNutritionTarget();
        DailyNutritionTarget = new DailyNutritionTarget(nutritionTarget.Nutrients);
        
        await UpdateFoodList();
    }
    
    private async Task UpdateFoodList()
    {
        var foods = await FoodListAdapter.GetLoggedFood(CurrentDate);
        Foods = foods.Select(f => new FoodSelector(f)).ToList();

        var calculatedNutrition = CalculateNutrition();
        Nutrients = calculatedNutrition.Values.ToList();

        // todo to model class
        Kcal = calculatedNutrition.TryGetValue("Kcal", out var kcal) ? kcal : null;
        Carbs = calculatedNutrition.TryGetValue("Carbohydrates", out var carbs) ? carbs : null;
        Protein = calculatedNutrition.TryGetValue("Protein", out var protein) ? protein : null;
        Fat = calculatedNutrition.TryGetValue("Total Fat", out var fat) ? fat : null;
    }

    private Dictionary<string, NutrientDto> CalculateNutrition()
    {
        var dictionary = new Dictionary<string, NutrientDto>();
        
        foreach (var nutrient in Foods.SelectMany(food => food.LoggedFoodModel.Nutrients))
        {
            if (dictionary.TryGetValue(nutrient.Name, out var dictionaryNutrient))
            {
                dictionaryNutrient.Weight += nutrient.Weight;
            }
            else
            {
                dictionary.Add(nutrient.Name, nutrient);
            }
        }

        return dictionary;
    }

    //TODO create component for previous and next date in the header
    private async Task GetPreviousNutritionDay()
    {
        CurrentDate = CurrentDate.AddDays(-1);
        
        await UpdateFoodList();
    }
    
    private async Task GetNextNutritionDay()
    {
        CurrentDate = CurrentDate.AddDays(1);

        await UpdateFoodList();
    }
}
