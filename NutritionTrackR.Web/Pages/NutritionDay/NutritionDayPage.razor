@page "/"
@using NutritionTrackR.Web.Services
@using NutritionTrackR.Web.Shared.Nutrition
@inject FoodListAdapter FoodListAdapter
@inject NutritionTargetAdapter NutritionTargetAdapter

@inherits CancellableComponent

<MudContainer MaxWidth="MaxWidth.Medium" Class="center-container">
    <div class="d-flex justify-content-center">
        <MudButton OnClick="GetPreviousNutritionDay">Previous Day</MudButton>
        <MudText>@CurrentDate</MudText>
        <MudButton OnClick="GetNextNutritionDay">Next Day</MudButton>
    </div>

    <div class="d-flex justify-content-center">
        @* TODO create custom component for round progressbar, should have background for progress indicator *@
        <div class="flex-column">
            <MudProgressCircular Style="width: 200px; height: 200px;" Color="Color.Primary" Value="@NutrientsModel.Carbohydrates.GetProgress()"/>
            <MudText Align="Align.Center">Carbs</MudText>
        </div>

        <div class="flex-column">
            <MudProgressCircular Style="width: 200px; height: 200px;" Color="Color.Primary" Value="@NutrientsModel.Protein.GetProgress()"/>
            <MudText Align="Align.Center">Protein</MudText>
        </div>

        <div class="flex-column">
            <MudProgressCircular Style="width: 200px; height: 200px;" Color="Color.Primary" Value="@NutrientsModel.Fat.GetProgress()"/>
            <MudText Align="Align.Center">Fat</MudText>
        </div>
    </div>

    <div class="d-flex flex-column mt-5 justify-content-center">
        <MudProgressLinear Size="Size.Large" Color="Color.Primary" Value="NutrientsModel.Calories.GetProgress()"></MudProgressLinear>
        <MudText Align="Align.Center">Kcal</MudText>
    </div>

    <MealDropZones OnFoodChangedEventCallback="UpdateFoodList"  @bind-Foods="FoodSelectors" CurrentDate="@CurrentDate"/>

</MudContainer>

@code {
    private List<FoodSelector> FoodSelectors { get; set; } = [];
    private NutrientsModel NutrientsModel { get; } = new();
    private DateOnly CurrentDate { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    
    private SortMode _sortMode = SortMode.Multiple;
    
    protected override async Task OnInitializedAsync()
    {
        var nutritionTargets  = await NutritionTargetAdapter.GetNutritionTarget(Cts.Token);
        NutrientsModel.SetNutrientTargets(nutritionTargets.Nutrients.ToDictionary(x => x.Name));

        await UpdateFoodList();
    }
    
    private async Task UpdateFoodList()
    {
        var foods = await FoodListAdapter.GetLoggedFood(CurrentDate, Cts.Token);
        FoodSelectors = foods.Select(f => new FoodSelector(f)).ToList();
        
        NutrientsModel.RecalculateNutrients(foods);
    }

    //TODO create component for previous and next date in the header
    private async Task GetPreviousNutritionDay()
    {
        CurrentDate = CurrentDate.AddDays(-1);
        
        await UpdateFoodList();
    }
    
    private async Task GetNextNutritionDay()
    {
        CurrentDate = CurrentDate.AddDays(1);

        await UpdateFoodList();
    }
}
