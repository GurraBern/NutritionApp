@page "/WeightTrackingPage"
@using NutritionTrackR.Contracts.BodyMeasurement
@using NutritionTrackR.Web.Services
@inject WeightAdapter WeightAdapter
<MudContainer MaxWidth="MaxWidth.Medium" Class="center-container gap-y-4">
    <div class="flex-column gap-5">
        
    <MudChart ChartType="ChartType.Line" Width="100%" ChartSeries="@_series" @bind-SelectedIndex="Index" XAxisLabels="@_xAxisLabels" ChartOptions="@_options"/>

    <div class="my-5">
        @* todo dynamic unit *@
        <div class="d-flex gap-3">
            <MudDatePicker Label="Date"></MudDatePicker>
            <MudNumericField T="decimal" Label="Enter weight" AdornmentText="kg" Adornment="Adornment.End" Format="F1" Variant="Variant.Outlined" @bind-Value="Weight"></MudNumericField>
        </div>

        <MudButton Color="Color.Primary" OnClick="@TrackWeight">Track Weight</MudButton>
    </div>

    <div class="my-5">
        <MudText Typo="Typo.h3">Weight Log</MudText>
        <MudList T="WeightDto">
            @foreach (var weightEntry in Weights)
            {
                <MudListItem Class="list-item-container">
                    <span class="d-flex gap-3 align-items-center">
                        <MudText>@weightEntry.Date.ToShortDateString()</MudText>
                        <MudText>@weightEntry.ToDisplayString()</MudText>

                        <MudIconButton Class="action-button" Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteWeightEntry(weightEntry.Id)"/>
                    </span>
                </MudListItem>
            }
        </MudList>
    </div>
    </div>
</MudContainer>
@* todo move to file *@
<style>
    .list-item-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        transition: background-color 0.3s ease;
    }

    .action-button {
        opacity: 0;
        visibility: hidden;
        transform: translateX(10px);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        margin-left: 8px;
        will-change: transform, opacity;
    }

    .list-item-container:hover .action-button {
        opacity: 1;
        visibility: visible;
        transform: translateX(0);
    }

    /* Optional: Add hover effect to button itself */
    .action-button:hover {
        transform: scale(1.1);
        transition: transform 0.2s ease;
    }

    /* Optional: Add background hover effect to list item */
    .list-item-container:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }
</style>

@code {
    private int Index = -1;
    private readonly ChartOptions _options = new()
    {
        ShowLegend = false,
        YAxisTicks = 1 
    };
    
    //TODO to chart component
    private readonly List<ChartSeries> _series = [];
    private readonly string[] _xAxisLabels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep"];

    private IEnumerable<WeightDto> Weights { get; set; } = [];
    private decimal Weight { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Weights = await WeightAdapter.GetWeightData();
        
        SetupChart(Weights);

        if(Weights.Any())
            Weight = (decimal)Weights.Last().Amount;
    }
    
    private void SetupChart(IEnumerable<WeightDto> weights)
    {
        var chartSeries = new ChartSeries
        {
            Data = weights.Select(x => x.Amount).ToArray()
        };

        _series.Add(chartSeries);
    }

    private async Task TrackWeight()
    {
        await WeightAdapter.TrackWeight(Weight);
    }
    
    private async Task DeleteWeightEntry(string id)
    {
        await WeightAdapter.DeleteWeight(id);
    }
}