@page "/NutritionGoal"
@using NutritionTrackR.Contracts.Nutrition.Target
@using NutritionTrackR.Web.Services
@inject NutritionTargetAdapter NutritionTargetAdapter
@inject IDialogService DialogService
@inherits CancellableComponent

<h3>NutritionGoal</h3>

<MudDataGrid T="NutrientDto" 
             Items="@NutritionTargetModel.Nutrients" 
             ReadOnly="@_readOnly" 
             EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)" 
             Bordered="true" 
             Dense="true" 
             EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Nutrient" Editable="false" />
        <PropertyColumn Property="x => x.Weight" Title="Weight" Editable="true"/>
        <PropertyColumn Property="x => x.Unit" Title="Unit" Editable="true"/>
        <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<MudButton Class="align-content-center" Variant="Variant.Filled" Size="Size.Large" Color="Color.Tertiary" OnClick="SaveNutritionalGoal">Save</MudButton>
<MudButton Class="align-content-center" Variant="Variant.Filled" Size="Size.Large" Color="Color.Tertiary" OnClick="CreateNutritionalGoal">Create</MudButton>

@code {
    private NutritionTargetDto NutritionTargetModel { get; set; } = new();
    
    //TODO remove?
    private bool _readOnly;
    private bool _isCellEditMode;
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        await FetchNutritionTarget();
    }
    
    private async Task FetchNutritionTarget()
    {

        NutritionTargetModel = await NutritionTargetAdapter.GetNutritionTarget(Cts.Token);
    }

    private async Task SaveNutritionalGoal()
    {
        await NutritionTargetAdapter.SetNutritionTarget(NutritionTargetModel.Nutrients);
    }
    
    private async Task CreateNutritionalGoal()
    {
        var dialogReference = await DialogService.ShowAsync<NutritionTargetDialog>();
        
        var dialogResult = await dialogReference.Result;
        if (dialogResult?.Canceled is false)
        {
            await FetchNutritionTarget();
        }
    }
}