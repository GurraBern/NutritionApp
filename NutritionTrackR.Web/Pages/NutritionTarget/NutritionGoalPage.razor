@page "/NutritionGoal"
@using NutritionTrackR.Contracts.Nutrition.Target
@using NutritionTrackR.Web.Services
@inject NutritionTargetAdapter NutritionTargetAdapter
@inject IDialogService DialogService
<h3>NutritionGoal</h3>

<MudDataGrid T="NutrientDto" Items="@NutritionTargetModel.Nutrients" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
             Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Nutrient" Editable="false" />
        <PropertyColumn Property="x => x.Weight" Title="Weight" Editable="true"/>
        <PropertyColumn Property="x => x.Unit" Title="Unit" Editable="true"/>
        <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<MudButton Class="align-content-center" Variant="Variant.Filled" Size="Size.Large" Color="Color.Tertiary" OnClick="SaveNutritionalGoal">Save</MudButton>
<MudButton Class="align-content-center" Variant="Variant.Filled" Size="Size.Large" Color="Color.Tertiary" OnClick="CreateNutritionalGoal">Create</MudButton>

@code {
    private NutritionTargetDto NutritionTargetModel { get; set; } = new();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = [];
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        NutritionTargetModel = await NutritionTargetAdapter.GetNutritionTarget();
    }

    void StartedEditingItem(NutrientDto item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(NutrientDto item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(NutrientDto item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    private async Task SaveNutritionalGoal()
    {
        await NutritionTargetAdapter.SetNutritionTarget(NutritionTargetModel.Nutrients);
    }
    private async Task CreateNutritionalGoal()
    {
        //TODO dialog lista -> alla nutrients med dropdown -> välj vikt create
        await DialogService.ShowAsync<NutritionTargetDialog>();
    }
}