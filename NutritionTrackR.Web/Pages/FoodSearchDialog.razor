@using NutritionTrackR.Contracts.Food
@using NutritionTrackR.Web.Components.Services
@using NutritionTrackR.Web.Shared.FoodSearch.AddFood

@inject FoodListAdapter FoodListAdapter
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Search Food
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudItem xs="12" sm="6" md="4">
            <MudAutocomplete @ref="FoodAutoComplete"
                             T="FoodDto"
                             Label="Search Food" 
                             SearchFunc="@Search"
                             ValueChanged="foodValue => SelectFood(foodValue)"
                             ShowProgressIndicator="true"
                             ToStringFunc="@(food => food is null ? null : $"{food.Name}")"
                             AdornmentIcon="@Icons.Material.Filled.Search" 
                             AdornmentColor="Color.Primary"/>
        </MudItem>
    </DialogContent>
    <DialogActions>
        <MudButton>Add Food</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] 
    private MudDialogInstance MudDialog { get; set; }
    
    [Parameter] 
    public MealTypeDto SelectedMealType { get; set; }
    
    [Parameter] 
    public EventCallback<List<FoodSelector>> OnFoodChangedEventCallback { get; set; }
    
    [Parameter] 
    public DateOnly Date { get; set; }

    private MudAutocomplete<FoodDto> FoodAutoComplete { get; set; } = new();
    private void Cancel() => MudDialog.Close();
    private void Submit() => MudDialog.Close(DialogResult.Ok(true));
    
    private async Task<IEnumerable<FoodDto>> Search(string searchTerm, CancellationToken token)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return [];

        var foods = await FoodListAdapter.GetFoodItems(searchTerm, token);

        return foods;
    }

    private async Task SelectFood(FoodDto selectedFood)
    {
        var foodModel = new FoodModel(selectedFood);
        DialogOptions options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogParameters<FoodDetailsDialog> parameters = new()
        {
            { x => x.FoodModel, foodModel },
            { x => x.SelectedMealType, SelectedMealType },
            { x => x.OnFoodChangedEventCallback, OnFoodChangedEventCallback },
            { x => x.CurrentDate, Date}
        };

        await FoodAutoComplete.CloseMenuAsync();
    
        var dialog = await DialogService.ShowAsync<FoodDetailsDialog>(selectedFood.Name, parameters, options);
        
        var result = await dialog.Result;

        if (result is { Canceled: false, Data: true })
        {
            Submit();
        }
    }
}